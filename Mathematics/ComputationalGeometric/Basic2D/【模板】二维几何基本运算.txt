struct Point
{
	double x,y;
	Point(double _x=0,double _y=0):x(_x),y(_y){}
};

typedef Point Vector;

const double eps=1e-6;
int dcmp(double x)
{
	if(fabs(x)<=eps) return 0;
	else if(x<0) return -1;
	else return 1;
}

double Angle(Vector a){return atan2(a.y,a.x);}
Vector operator + (Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}
Vector operator - (Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}
Vector operator - (Vector b){return Vector(-b.x,-b.y);}
Vector operator * (Vector a,double x){return Vector(a.x*x,a.y*x);}
Vector operator / (Vector a,double x){return Vector(a.x/x,a.y/x);}

bool operator < (Point a,Point b){return a.x<b.x||(a.x==b.x&&a.y<b.y);}
bool operator == (Point a,Point b){return dcmp(a.x-b.x)==0&&dcmp(a.y-b.y)==0;}

double Dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}
double Length(Vector a){return sqrt(Dot(a,a));}
double Angle(Vector a,Vector b){return acos(Dot(a,b)/(Length(a)*Length(b)));}

double Cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}
double TriangleArea(Point A,Point B,Point C){return Cross(B-A,C-A)/2;}

Vector Rotate(Vector a,double alpha){return Vector(a.x*cos(alpha)-a.y*sin(alpha),a.x*sin(alpha)+a.y*cos(alpha));}
Vector Normal(Vector a)
{
	double L=Length(a);
	return Vector(-a.y/L,a.x/L);
}

Point GetLineIntersection(Point P,Vector v,Point Q,Vector w)
{
	Vector u=P-Q;
	double t=Cross(w,u)/Cross(v,w);
	return P+v*t;
}

double DistanceToLine(Point P,Point A,Point B)
{
	Vector v1=B-A,v2=P-A;
	return fabs(Cross(v1,v2)/Length(v1));
}

double DistanceToSegment(Point P,Point A,Point B)
{
	Vector AB=B-A,AP=P-A,BP=P-B;
	if(A==B) return Length(AP);
	if(dcmp(Dot(AP,AB))<0) return Length(AP);
	if(dcmp(Dot(-AB,BP))<0) return Length(BP);
	return fabs(Cross(AB,AP)/Length(AB));
}

Point GetLineProjection(Point P,Point A,Point B)
{
	Vector v=B-A;
	return A+v*(Dot(v,P-A)/Dot(v,v));
}

bool OnSegment(Point P,Point A,Point B)
{
	Vector PA=A-P,PB=B-P; 
	return Cross(PA,PB)==0&&dcmp(Dot(PA,PB))<0;
}

bool SegmentProperIntersection(Point a1,Point a2,Point b1,Point b2)
{
	double c1=Cross(b1-a1,a2-a1),c2=Cross(b2-a1,a2-a1);
	double c3=Cross(a1-b1,b2-b1),c4=Cross(a2-b1,b2-b1);
	return dcmp(c1)*dcmp(c2)<0&&dcmp(c3)*dcmp(c4)<0;
}

double PolygonArea(Point p[],int n)
{
	double ans=0;
	for(int i=1;i<n-1;i++)
		ans+=Cross(p[i]-p[0],p[i+1]-p[0]);
	return ans/2;
}

bool PointInPolygon(Point p,Point res[],int cnt)
{
    int wn=0;
    for (int i=0;i<cnt;i++)
	{
        if(res[i]==p||res[(i+1)%cnt]==p||PointInSegment(p,res[i],res[(i+1)%cnt]))
            return 1;
        int k=Cross(res[(i+1)%cnt]-res[i],p-res[i]);
        int d1=res[i].y-p.y;
        int d2=res[(i+1)%cnt].y-p.y;
        if(k>0&&d1<=0&&d2>0) wn++;
        if(k<0&&d2<=0&&d1>0) wn--;
    }
    if(wn) return 1;
    return 0;
}
